=======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement FOUNDATIONS REQUIREMENT: You must satisfy the requirements listed in each of the following areas; all courses taken elsewhere must be approved by your adviser via the foundation course waiver form. Do not enter anything in the “Units” column for courses taken elsewhere or for Stanford courses counted towards your undergraduate degree.

Required: 

| Equivalent elsewhere (course numbers/titles/institution) | Grade | Units |
| ---------------------------------- | ----- | ----- |
| Logic, Automata & Complexity (CS103)                        |           |          |
| Probability (CS109, Stat116, CME106, MS&E220, or EE178)     |           |          |
| Algorithmic Analysis (CS161)                                |           |          |
| Computer Organ & Sys (CS107 or 107E)                        |           |          |
| Principles of Computer Systems (CS110 or CS111)            |           |          |

TOTAL UNITS USED TO SATISFY FOUNDATIONS REQUIREMENT (May not exceed 10 units.) you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        FOUNDATIONS REQUIREMENT: You must satisfy the requirements listed in each of the following areas; all courses taken elsewhere must be approved by your adviser via the foundation course waiver form. Do not enter anything in the “Units” column for courses taken elsewhere or for Stanford courses counted towards your undergraduate degree.

Required: 

| Equivalent elsewhere (course numbers/titles/institution) | Grade | Units |
| ---------------------------------- | ----- | ----- |
| Logic, Automata & Complexity (CS103)                        |           |          |
| Probability (CS109, Stat116, CME106, MS&E220, or EE178)     |           |          |
| Algorithmic Analysis (CS161)                                |           |          |
| Computer Organ & Sys (CS107 or 107E)                        |           |          |
| Principles of Computer Systems (CS110 or CS111)            |           |          |

TOTAL UNITS USED TO SATISFY FOUNDATIONS REQUIREMENT (May not exceed 10 units.). Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the FOUNDATIONS REQUIREMENT: You must satisfy the requirements listed in each of the following areas; all courses taken elsewhere must be approved by your adviser via the foundation course waiver form. Do not enter anything in the “Units” column for courses taken elsewhere or for Stanford courses counted towards your undergraduate degree.

Required: 

| Equivalent elsewhere (course numbers/titles/institution) | Grade | Units |
| ---------------------------------- | ----- | ----- |
| Logic, Automata & Complexity (CS103)                        |           |          |
| Probability (CS109, Stat116, CME106, MS&E220, or EE178)     |           |          |
| Algorithmic Analysis (CS161)                                |           |          |
| Computer Organ & Sys (CS107 or 107E)                        |           |          |
| Principles of Computer Systems (CS110 or CS111)            |           |          |

TOTAL UNITS USED TO SATISFY FOUNDATIONS REQUIREMENT (May not exceed 10 units.). You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that your formulas should check taken courses in the transcript against each contraint and requirement. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================
To generate parameterized cvc5 solver formulas for the constraints in the FOUNDATIONS REQUIREMENT using the given transcript schema, follow these steps. We'll be using cvc5's SMT-lib syntax to define the various constraints and conditions. Below is the code to achieve this:

```python
import cvc5
from cvc5 import Kind

# Create the solver instance
solver = cvc5.Solver()

# Sample Transcript Structure
transcript = {
    "Student": {
        "Name": "John Doe",
        "Program": "CS Masters",
        "StudentID": 123456,
        "Coterm": False
    },
    "AP_Credits": [
        {"Advanced_Placement": "CS", "Earned_Units": 5}
    ],
    "Courses_Taken": [
        {"Course_ID": 103, "Title": "CS103", "Earned_Units": 5, "Grade": "A"},
        {"Course_ID": 109, "Title": "CS109", "Earned_Units": 5, "Grade": "A"},
        {"Course_ID": 161, "Title": "CS161", "Earned_Units": 3, "Grade": "A"}
        # Add more courses as needed
    ],
    "Deviations": [
        {"Deviated_Course_ID": "None", "Approved": False, "Approved_By": "None"},
    ],
    "Approval": [
        {"Approved": True, "Approved_By": "Advisor", "Approved_Course_ID": "CS103"}
    ],
    "Cumulative_GPA": {
        "Undergrad": 3.5,
        "Graduate": 4.0,
    },
}

# Helper Function to Assert Course Constraints
def course_constraint(course_title, valid_titles):
    course_var = solver.mkConst(solver.getStringSort(), course_title)
    constraints = [solver.mkTerm(Kind.EQUAL, course_var, solver.mkString(course["Title"])) for course in transcript.get("Courses_Taken", [])]
    return solver.mkTerm(Kind.OR, *constraints), course_var

# List the required courses and their equivalent titles
required_courses = {
    "Logic, Automata & Complexity": ["CS103"],
    "Probability": ["CS109", "Stat116", "CME106", "MS&E220", "EE178"],
    "Algorithmic Analysis": ["CS161"],
    "Computer Organ & Sys": ["CS107", "CS107E"],
    "Principles of Computer Systems": ["CS110", "CS111"],
}

course_vars = {}
course_constraints = []
for course_title, valid_titles in required_courses.items():
    constraint, course_var = course_constraint(course_title, valid_titles)
    course_constraints.append(constraint)
    course_vars[course_title] = course_var

# Combine all course constraints
all_course_constraints = solver.mkTerm(Kind.AND, *course_constraints)

# Constraint to check that total units do not exceed 10 units
total_units_var = solver.mkConst(solver.getRealSort(), "total_units")
all_units = [solver.mkTerm(Kind.ADD, total_units_var, solver.mkReal(course["Earned_Units"])) for course in transcript.get("Courses_Taken", [])]

# Sum of units constraint
sum_units_constraint = solver.mkTerm(Kind.LEQ, total_units_var, solver.mkReal(10))

# Combine all constraints
overall_constraint = solver.mkTerm(Kind.AND, all_course_constraints, sum_units_constraint)

# Check for advisor approval on deviations
def advisor_approval_constraint():
    approval_constraints = []
    for approval in transcript.get("Approval", []):
        is_approved = solver.mkBoolean(approval["Approved"])
        if is_approved:
            approved_course_id = solver.mkString(approval["Approved_Course_ID"])
            approval_constraints.append(solver.mkTerm(Kind.EQUAL, approved_course_id, solver.mkString("CS103")))  # Example
    if approval_constraints:
        return solver.mkTerm(Kind.AND, *approval_constraints)
    return solver.mkTrue()

# Get the final approval constraint
final_approval_constraint = advisor_approval_constraint()

# Add approval constraints to the overall constraint
final_constraint = solver.mkTerm(Kind.AND, overall_constraint, final_approval_constraint)

# Assert the final constraint to the solver
solver.assertFormula(final_constraint)

# Check satisfiability
result = solver.checkSat()
print('Satisfiability:', result)

if result.isSat():
    print('The transcript satisfies the FOUNDATIONS REQUIREMENT.')
else:
    print('The transcript does NOT satisfy the FOUNDATIONS REQUIREMENT.')
```

Explanation:
1. **Course Constraints**: We define constraints to ensure that the required courses are part of the "Courses_Taken" list in the transcript schema.
2. **Total Units Constraint**: We ensure that the total earned units through the required courses do not exceed 10 units.
3. **Advisor Approval Constraint**: We ensure that any deviations are approved by the advisor.
4. **Combining Constraints**: We combine all the constraints using logical AND operations and assert the final constraint to the solver.
5. **Checking Satisfiability**: We check whether the provided transcript satisfies the requirements.

Ensure that cvc5 is installed and properly configured in your environment to run the script.