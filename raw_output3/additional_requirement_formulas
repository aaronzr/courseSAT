=======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement ADDITIONAL REQUIREMENTS
• All courses submitted for the MSCS degree must be numbered 100 or greater.
• At most 10 units of Foundations requirement courses may be counted toward your 45 units.
• At most 3 units of 1-2 unit seminars may be counted toward your 45 units.
• At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade.*
• The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale).
• Units previously applied toward BS requirements may not also be counted toward the MSCS.
• You must complete at least 45 graduate units at Stanford before receiving the MSCS degree.

*All classes taken Spring 19-20 and Fall through Summer 20-21 for a CR or S grade will satisfy MSCS requirements as if taken for a letter grade. you have identified.
        Your formulas should include every constraint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        ADDITIONAL REQUIREMENTS
• All courses submitted for the MSCS degree must be numbered 100 or greater.
• At most 10 units of Foundations requirement courses may be counted toward your 45 units.
• At most 3 units of 1-2 unit seminars may be counted toward your 45 units.
• At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade.*
• The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale).
• Units previously applied toward BS requirements may not also be counted toward the MSCS.
• You must complete at least 45 graduate units at Stanford before receiving the MSCS degree.

*All classes taken Spring 19-20 and Fall through Summer 20-21 for a CR or S grade will satisfy MSCS requirements as if taken for a letter grade.. Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the ADDITIONAL REQUIREMENTS
• All courses submitted for the MSCS degree must be numbered 100 or greater.
• At most 10 units of Foundations requirement courses may be counted toward your 45 units.
• At most 3 units of 1-2 unit seminars may be counted toward your 45 units.
• At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade.*
• The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale).
• Units previously applied toward BS requirements may not also be counted toward the MSCS.
• You must complete at least 45 graduate units at Stanford before receiving the MSCS degree.

*All classes taken Spring 19-20 and Fall through Summer 20-21 for a CR or S grade will satisfy MSCS requirements as if taken for a letter grade.. You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that your formulas should check taken courses in the transcript against each contraint and requirement. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================
To generate the cvc5 solver formulas for the requirements mentioned, we will create parameterized constraints for each requirement and check them against the `transcript` schema given. Here's how we can approach this:

1. **All courses submitted for the MSCS degree must be numbered 100 or greater.**

2. **At most 10 units of Foundations requirement courses may be counted toward your 45 units.**
  
3. **At most 3 units of 1-2 unit seminars may be counted toward your 45 units.**

4. **At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade.** `<*Special handling for Spring 19-20 through Summer 20-21 for CR or S grades>`

5. **The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale).**

6. **Units previously applied toward BS requirements may not also be counted toward the MSCS.**

7. **You must complete at least 45 graduate units at Stanford before receiving the MSCS degree.**

8. **Handle advisor approval and deviations.**

Below is the code to instantiate the cvc5 solver and create the necessary parameterized formulas.

```python
from cvc5 import Kind, Solver

solver = Solver()

# Example handling for requirement 1:
course_ids = [solver.mkConst(solver.getIntegerSort(), f"course_id_{i}")
              for i, course in enumerate(transcript["Courses_Taken"])]
constraints_set = [solver.mkTerm(Kind.GEQ, course_id, solver.mkInteger(100))
                   for course_id in course_ids]
requirement_1 = solver.mkTerm(Kind.AND, *constraints_set)

# Requirement 2: At most 10 units of Foundations requirement courses.
foundations_courses = [course for course in transcript["Courses_Taken"]
                       if "Foundations" in course["Title"]]
foundations_units = sum(course["Earned_Units"] for course in foundations_courses)
requirement_2 = solver.mkTerm(Kind.LEQ, solver.mkInteger(foundations_units), solver.mkInteger(10))

# Requirement 3: At most 3 units of 1-2 unit seminars.
seminar_units = sum(course["Earned_Units"] for course in transcript["Courses_Taken"]
                    if 1 <= course["Earned_Units"] <= 2)
requirement_3 = solver.mkTerm(Kind.LEQ, solver.mkInteger(seminar_units), solver.mkInteger(3))

# Requirement 4: At least 36 units for a letter grade.
courses_letter_grade = [course for course in transcript["Courses_Taken"] if course["Grade"] not in ["CR", "S"]]
# Add courses satisfying the exception for Spring 19-20 through Summer 20-21
courses_cr_s_in_exception = []
for course in transcript["Courses_Taken"]:
    # Assuming we have the term information available
    if course["Grade"] in ["CR", "S"] and "Spring_19-20" <= course.get("Term", "") <= "Summer_20-21":
        courses_cr_s_in_exception.append(course)

letter_grade_units = sum(course["Earned_Units"] for course in courses_letter_grade + courses_cr_s_in_exception)
requirement_4 = solver.mkTerm(Kind.GEQ, solver.mkInteger(letter_grade_units), solver.mkInteger(36))

# Requirement 5: Average grade must be at least 3.0.
grade_map = {"A": 4.0, "A-": 3.7, "B+": 3.3, "B": 3.0, "B-": 2.7, "C+": 2.3, "C": 2.0, "C-": 1.7, "D+": 1.3, "D": 1.0, "F": 0.0}
total_units = sum(course["Earned_Units"] for course in transcript["Courses_Taken"] if course["Grade"] in grade_map)
total_points = sum((grade_map[course["Grade"]] * course["Earned_Units"]) for course in transcript["Courses_Taken"] if course["Grade"] in grade_map)
average_gpa = total_points / total_units if total_units > 0 else 0
requirement_5 = solver.mkTerm(Kind.GEQ, solver.mkReal(average_gpa), solver.mkReal(3.0))

# Requirement 6: Units applied toward BS may not count toward MSCS.
bs_units = sum(course["Earned_Units"] for course in transcript["AP_Credits"])
mscs_units = sum(course["Earned_Units"] for course in transcript["Courses_Taken"])
requirement_6 = solver.mkTerm(Kind.GT, solver.mkInteger(mscs_units), solver.mkInteger(bs_units))

# Requirement 7: At least 45 graduate units at Stanford.
requirement_7 = solver.mkTerm(Kind.GEQ, solver.mkInteger(mscs_units), solver.mkInteger(45))

# Put all requirements together.
final_formula = solver.mkTerm(Kind.AND, requirement_1, requirement_2, requirement_3, requirement_4, requirement_5, requirement_6, requirement_7)
solver.assertFormula(final_formula)

# Check satisfiability
print(solver.checkSat())
```

This code encapsulates each requirement using a combination of the transcript data and cvc5 solver's functionalities to ensure that all constraints are satisfied. Each requirement is converted into a constraint and finally, all constraints are combined into a single formula that the solver checks for satisfiability.