=======================prompt===========================

        Please optimize your generated solver formulas by minimizing the use of
        for loops or if condition checks. The following example is an okay format, because we use a variable in the formula
        to parameterize the formulas as input to the solver: 
        ```python
        variable = solver.mkConst(solver.getStringSort(), "course")
        constraint_1 = [solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString(variable)) for course in transcript.get("Courses_Taken", [])]
        constraint_2 = solver.mkTerm(Kind.EQUAL, solver.mkString(variable), solver.mkString("CS 221"))
        formula = solver.mkTerm(Kind.AND, constraint_1, constraint_2)
        ```
        The following example is NOT an okay format, because the formula is using hard coded values and is NOT parameterized: 
        ```python 
        for course in transcript.get("Courses_Taken", []):
                cs_221 = solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString("CS 221"))
        ```
        Please check the following out and convert for loops and if conditional checks into 
        solver formulas when possible: =======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement **ARTIFICIAL INTELLIGENCE DEPTH**

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) **CS 221** (students with equivalent coursework may waive with adviser approval)

b) **At least four of:**
   - CS 223A
   - CS 224N
   - CS 224S
   - CS 224U
   - CS 224V
   - CS 224W
   - CS 228
   - CS 229
   - CS 231A
   - CS 231N
   - CS 234
   - CS 237A
   - CS 237B
   - CS 238

c) **A total of at least 21 units from categories (a), (b) and the following:**
   - CS 205L
   - CS 224R
   - CS 225A
   - CS 227B
   - CS 229M
   - CS 230
   - CS 233
   - CS 235
   - CS 236
   - CS 239
   - CS 246
   - CS 257
   - CS 270
   - CS 271
   - CS 273A
   - CS 273B
   - CS 274
   - CS 275
   - CS 279
   - CS 281
   - CS 322
   - CS 324
   - CS 325B
   - CS 326
   - CS 327A
   - CS 329 (any suffix)
   - CS 330
   - CS 331B
   - CS 332
   - CS 333
   - CS 345
   - CS 348N
   - CS 361
   - CS 368
   - CS 371
   - CS 375
   - CS 377† (any suffix)
   - CS 379† (any suffix)
   - CS 398
   - CS 399†
   - CS 428A
   - CS 428B
   - CS 432
   - EE 263
   - EE 276
   - EE 278
   - EE 364A
   - EE 364B
   - EE 377
   - EE 378B
   - ENGR 205
   - ENGR 209A
   - MS&E 226
   - MS&E 252
   - PSYCH 209
   - STATS 202
   - STATS 315A
   - STATS 315B

(courses with † notation require approval of MS adviser) you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        **ARTIFICIAL INTELLIGENCE DEPTH**

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) **CS 221** (students with equivalent coursework may waive with adviser approval)

b) **At least four of:**
   - CS 223A
   - CS 224N
   - CS 224S
   - CS 224U
   - CS 224V
   - CS 224W
   - CS 228
   - CS 229
   - CS 231A
   - CS 231N
   - CS 234
   - CS 237A
   - CS 237B
   - CS 238

c) **A total of at least 21 units from categories (a), (b) and the following:**
   - CS 205L
   - CS 224R
   - CS 225A
   - CS 227B
   - CS 229M
   - CS 230
   - CS 233
   - CS 235
   - CS 236
   - CS 239
   - CS 246
   - CS 257
   - CS 270
   - CS 271
   - CS 273A
   - CS 273B
   - CS 274
   - CS 275
   - CS 279
   - CS 281
   - CS 322
   - CS 324
   - CS 325B
   - CS 326
   - CS 327A
   - CS 329 (any suffix)
   - CS 330
   - CS 331B
   - CS 332
   - CS 333
   - CS 345
   - CS 348N
   - CS 361
   - CS 368
   - CS 371
   - CS 375
   - CS 377† (any suffix)
   - CS 379† (any suffix)
   - CS 398
   - CS 399†
   - CS 428A
   - CS 428B
   - CS 432
   - EE 263
   - EE 276
   - EE 278
   - EE 364A
   - EE 364B
   - EE 377
   - EE 378B
   - ENGR 205
   - ENGR 209A
   - MS&E 226
   - MS&E 252
   - PSYCH 209
   - STATS 202
   - STATS 315A
   - STATS 315B

(courses with † notation require approval of MS adviser). Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the **ARTIFICIAL INTELLIGENCE DEPTH**

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) **CS 221** (students with equivalent coursework may waive with adviser approval)

b) **At least four of:**
   - CS 223A
   - CS 224N
   - CS 224S
   - CS 224U
   - CS 224V
   - CS 224W
   - CS 228
   - CS 229
   - CS 231A
   - CS 231N
   - CS 234
   - CS 237A
   - CS 237B
   - CS 238

c) **A total of at least 21 units from categories (a), (b) and the following:**
   - CS 205L
   - CS 224R
   - CS 225A
   - CS 227B
   - CS 229M
   - CS 230
   - CS 233
   - CS 235
   - CS 236
   - CS 239
   - CS 246
   - CS 257
   - CS 270
   - CS 271
   - CS 273A
   - CS 273B
   - CS 274
   - CS 275
   - CS 279
   - CS 281
   - CS 322
   - CS 324
   - CS 325B
   - CS 326
   - CS 327A
   - CS 329 (any suffix)
   - CS 330
   - CS 331B
   - CS 332
   - CS 333
   - CS 345
   - CS 348N
   - CS 361
   - CS 368
   - CS 371
   - CS 375
   - CS 377† (any suffix)
   - CS 379† (any suffix)
   - CS 398
   - CS 399†
   - CS 428A
   - CS 428B
   - CS 432
   - EE 263
   - EE 276
   - EE 278
   - EE 364A
   - EE 364B
   - EE 377
   - EE 378B
   - ENGR 205
   - ENGR 209A
   - MS&E 226
   - MS&E 252
   - PSYCH 209
   - STATS 202
   - STATS 315A
   - STATS 315B

(courses with † notation require approval of MS adviser). You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that your formulas should check taken courses in the transcript against each contraint and requirement. Please generate
        parameterized formulas with respect to the requirements only. 
        . Please make sure you output parameterized solver formulas
        covering each constraint in **ARTIFICIAL INTELLIGENCE DEPTH**

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) **CS 221** (students with equivalent coursework may waive with adviser approval)

b) **At least four of:**
   - CS 223A
   - CS 224N
   - CS 224S
   - CS 224U
   - CS 224V
   - CS 224W
   - CS 228
   - CS 229
   - CS 231A
   - CS 231N
   - CS 234
   - CS 237A
   - CS 237B
   - CS 238

c) **A total of at least 21 units from categories (a), (b) and the following:**
   - CS 205L
   - CS 224R
   - CS 225A
   - CS 227B
   - CS 229M
   - CS 230
   - CS 233
   - CS 235
   - CS 236
   - CS 239
   - CS 246
   - CS 257
   - CS 270
   - CS 271
   - CS 273A
   - CS 273B
   - CS 274
   - CS 275
   - CS 279
   - CS 281
   - CS 322
   - CS 324
   - CS 325B
   - CS 326
   - CS 327A
   - CS 329 (any suffix)
   - CS 330
   - CS 331B
   - CS 332
   - CS 333
   - CS 345
   - CS 348N
   - CS 361
   - CS 368
   - CS 371
   - CS 375
   - CS 377† (any suffix)
   - CS 379† (any suffix)
   - CS 398
   - CS 399†
   - CS 428A
   - CS 428B
   - CS 432
   - EE 263
   - EE 276
   - EE 278
   - EE 364A
   - EE 364B
   - EE 377
   - EE 378B
   - ENGR 205
   - ENGR 209A
   - MS&E 226
   - MS&E 252
   - PSYCH 209
   - STATS 202
   - STATS 315A
   - STATS 315B

(courses with † notation require approval of MS adviser).
        =======================fixed formula ouput===========================
Below is the cvc5 solver code implementing the constraints for the **ARTIFICIAL INTELLIGENCE DEPTH** requirements. The formulas are optimized to minimize the use of for loops and if condition checks and are parameterized to allow the solver to check the transcript schema for each constraint:

```python
import cvc5
from cvc5 import Kind, Solver

solver = Solver()

# Variables
courses_taken = transcript.get("Courses_Taken", [])
deviations = transcript.get("Deviations", [])
approval = transcript.get("Approval", [])

courses_taken_vars = [solver.mkConst(solver.getStringSort(), f"course{i}") for i in range(len(courses_taken))]
units_taken_vars = [solver.mkConst(solver.getRealSort(), f"units{i}") for i in range(len(courses_taken))]
grades_taken_vars = [solver.mkConst(solver.getStringSort(), f"grade{i}") for i in range(len(courses_taken))]

# All courses must be taken for a letter grade for 3 or more units
letter_grades = ["A", "B", "C", "D", "E", "F"]
all_grades_constraints = [solver.mkTerm(Kind.OR, [solver.mkTerm(Kind.EQUAL, grade_var, solver.mkString(grade)) for grade in letter_grades]) for grade_var in grades_taken_vars]
all_units_constraints = [solver.mkTerm(Kind.GEQ, unit_var, solver.mkReal(3)) for unit_var in units_taken_vars]

# A maximum of 6 units of CS 399 Independent Study may be counted towards the depth
cs_399_units = [solver.mkTerm(Kind.ITE, solver.mkTerm(Kind.EQUAL, course_var, solver.mkString("CS 399")), unit_var, solver.mkReal(0)) for course_var, unit_var in zip(courses_taken_vars, units_taken_vars)]
cs_399_units_total = solver.mkTerm(Kind.PLUS, *cs_399_units)
cs_399_constraint = solver.mkTerm(Kind.LEQ, cs_399_units_total, solver.mkReal(6))

# Maximum of one advisor-approved deviation allowed
approved_deviations = [solver.mkTerm(Kind.EQUAL, solver.mkString(d.get("Approved")), solver.mkBoolean(True)) for d in deviations]
approved_deviations_constraint = solver.mkTerm(Kind.LEQ, solver.mkTerm(Kind.ADD, *approved_deviations), solver.mkInteger(1))

# Check if CS 221 is taken or the deviation is approved
cs_221_constraints = [solver.mkTerm(Kind.EQUAL, course_var, solver.mkString("CS 221")) for course_var in courses_taken_vars]
cs_221_approved = [solver.mkTerm(Kind.EQUAL, solver.mkString(d.get("Deviated_Course_ID")), solver.mkString("CS 221")) for d in deviations if d.get("Approved")]
cs_221_waived_approved = solver.mkTerm(Kind.OR, *cs_221_approved)
cs_221_constraint = solver.mkTerm(Kind.OR, solver.mkTerm(Kind.OR, *cs_221_constraints), cs_221_waived_approved)

# At least four of the specific courses must be taken
depth_courses = ["CS 223A", "CS 224N", "CS 224S", "CS 224U", "CS 224V", "CS 224W", "CS 228", "CS 229",
                 "CS 231A", "CS 231N", "CS 234", "CS 237A", "CS 237B", "CS 238"]
depth_courses_constraints = [solver.mkTerm(Kind.EQUAL, course_var, solver.mkString(course)) for course_var in courses_taken_vars for course in depth_courses]
four_depth_courses_requirement = solver.mkTerm(Kind.GEQ, solver.mkTerm(Kind.ADD, *depth_courses_constraints), solver.mkInteger(4))

# Minimum of 21 units from the categories (a), (b), and additional approved courses
all_courses = depth_courses + [
    "CS 205L", "CS 224R", "CS 225A", "CS 227B", "CS 229M", "CS 230", "CS 233", "CS 235",
    "CS 236", "CS 239", "CS 246", "CS 257", "CS 270", "CS 271", "CS 273A", "CS 273B", "CS 274",
    "CS 275", "CS 279", "CS 281", "CS 322", "CS 324", "CS 325B", "CS 326", "CS 327A", "CS 329",
    "CS 330", "CS 331B", "CS 332", "CS 333", "CS 345", "CS 348N", "CS 361", "CS 368", "CS 371",
    "CS 375", "CS 377", "CS 379", "CS 398", "CS 399", "CS 428A", "CS 428B", "CS 432", "EE 263", "EE 276",
    "EE 278", "EE 364A", "EE 364B", "EE 377", "EE 378B", "ENGR 205", "ENGR 209A", "MS&E 226", "MS&E 252",
    "PSYCH 209", "STATS 202", "STATS 315A", "STATS 315B"
]
units_approved_courses = [solver.mkTerm(Kind.ITE, solver.mkTerm(Kind.EQUAL, course_var, solver.mkString(course)), unit_var, solver.mkReal(0)) for course_var in courses_taken_vars for course in all_courses]
units_total_approved_courses = solver.mkTerm(Kind.PLUS, *units_approved_courses)
units_constraint = solver.mkTerm(Kind.GEQ, units_total_approved_courses, solver.mkReal(21))

# Combining all the constraints
final_constraints = [
    *all_grades_constraints, 
    *all_units_constraints, 
    cs_399_constraint, 
    approved_deviations_constraint, 
    cs_221_constraint, 
    four_depth_courses_requirement, 
    units_constraint
]
final_formula = solver.mkTerm(Kind.AND, *final_constraints)

# Assert the final formula
solver.assertFormula(final_formula)
```

This cvc5 solver code defines constraints based on the **ARTIFICIAL INTELLIGENCE DEPTH** requirements for a given transcript schema. The solver will check the transcript against each constraint and ensure that the provided constraints are met.