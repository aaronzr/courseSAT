=======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement **ARTIFICIAL INTELLIGENCE DEPTH**

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) **CS 221** (students with equivalent coursework may waive with adviser approval)

b) **At least four of:**
   - CS 223A
   - CS 224N
   - CS 224S
   - CS 224U
   - CS 224V
   - CS 224W
   - CS 228
   - CS 229
   - CS 231A
   - CS 231N
   - CS 234
   - CS 237A
   - CS 237B
   - CS 238

c) **A total of at least 21 units from categories (a), (b) and the following:**
   - CS 205L
   - CS 224R
   - CS 225A
   - CS 227B
   - CS 229M
   - CS 230
   - CS 233
   - CS 235
   - CS 236
   - CS 239
   - CS 246
   - CS 257
   - CS 270
   - CS 271
   - CS 273A
   - CS 273B
   - CS 274
   - CS 275
   - CS 279
   - CS 281
   - CS 322
   - CS 324
   - CS 325B
   - CS 326
   - CS 327A
   - CS 329 (any suffix)
   - CS 330
   - CS 331B
   - CS 332
   - CS 333
   - CS 345
   - CS 348N
   - CS 361
   - CS 368
   - CS 371
   - CS 375
   - CS 377† (any suffix)
   - CS 379† (any suffix)
   - CS 398
   - CS 399†
   - CS 428A
   - CS 428B
   - CS 432
   - EE 263
   - EE 276
   - EE 278
   - EE 364A
   - EE 364B
   - EE 377
   - EE 378B
   - ENGR 205
   - ENGR 209A
   - MS&E 226
   - MS&E 252
   - PSYCH 209
   - STATS 202
   - STATS 315A
   - STATS 315B

(courses with † notation require approval of MS adviser) you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        **ARTIFICIAL INTELLIGENCE DEPTH**

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) **CS 221** (students with equivalent coursework may waive with adviser approval)

b) **At least four of:**
   - CS 223A
   - CS 224N
   - CS 224S
   - CS 224U
   - CS 224V
   - CS 224W
   - CS 228
   - CS 229
   - CS 231A
   - CS 231N
   - CS 234
   - CS 237A
   - CS 237B
   - CS 238

c) **A total of at least 21 units from categories (a), (b) and the following:**
   - CS 205L
   - CS 224R
   - CS 225A
   - CS 227B
   - CS 229M
   - CS 230
   - CS 233
   - CS 235
   - CS 236
   - CS 239
   - CS 246
   - CS 257
   - CS 270
   - CS 271
   - CS 273A
   - CS 273B
   - CS 274
   - CS 275
   - CS 279
   - CS 281
   - CS 322
   - CS 324
   - CS 325B
   - CS 326
   - CS 327A
   - CS 329 (any suffix)
   - CS 330
   - CS 331B
   - CS 332
   - CS 333
   - CS 345
   - CS 348N
   - CS 361
   - CS 368
   - CS 371
   - CS 375
   - CS 377† (any suffix)
   - CS 379† (any suffix)
   - CS 398
   - CS 399†
   - CS 428A
   - CS 428B
   - CS 432
   - EE 263
   - EE 276
   - EE 278
   - EE 364A
   - EE 364B
   - EE 377
   - EE 378B
   - ENGR 205
   - ENGR 209A
   - MS&E 226
   - MS&E 252
   - PSYCH 209
   - STATS 202
   - STATS 315A
   - STATS 315B

(courses with † notation require approval of MS adviser). Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the **ARTIFICIAL INTELLIGENCE DEPTH**

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) **CS 221** (students with equivalent coursework may waive with adviser approval)

b) **At least four of:**
   - CS 223A
   - CS 224N
   - CS 224S
   - CS 224U
   - CS 224V
   - CS 224W
   - CS 228
   - CS 229
   - CS 231A
   - CS 231N
   - CS 234
   - CS 237A
   - CS 237B
   - CS 238

c) **A total of at least 21 units from categories (a), (b) and the following:**
   - CS 205L
   - CS 224R
   - CS 225A
   - CS 227B
   - CS 229M
   - CS 230
   - CS 233
   - CS 235
   - CS 236
   - CS 239
   - CS 246
   - CS 257
   - CS 270
   - CS 271
   - CS 273A
   - CS 273B
   - CS 274
   - CS 275
   - CS 279
   - CS 281
   - CS 322
   - CS 324
   - CS 325B
   - CS 326
   - CS 327A
   - CS 329 (any suffix)
   - CS 330
   - CS 331B
   - CS 332
   - CS 333
   - CS 345
   - CS 348N
   - CS 361
   - CS 368
   - CS 371
   - CS 375
   - CS 377† (any suffix)
   - CS 379† (any suffix)
   - CS 398
   - CS 399†
   - CS 428A
   - CS 428B
   - CS 432
   - EE 263
   - EE 276
   - EE 278
   - EE 364A
   - EE 364B
   - EE 377
   - EE 378B
   - ENGR 205
   - ENGR 209A
   - MS&E 226
   - MS&E 252
   - PSYCH 209
   - STATS 202
   - STATS 315A
   - STATS 315B

(courses with † notation require approval of MS adviser). You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that your formulas should check taken courses in the transcript against each contraint and requirement. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================
To generate cvc5 python solver formulas for the **Artificial Intelligence Depth** requirements, we'll create constraints for each of the requirement sections (a, b, c) and also include constraints related to advisor approval and deviations.

```python
from cvc5 import Solver, Kind

solver = Solver()

# Transcript Schema Template Variables
transcript = {
    "Courses_Taken": [
        {"Course_ID": "CS 221", "Title": "Artificial Intelligence: Principles and Techniques", "Earned_Units": 3, "Grade": "A"},
        {"Course_ID": "CS 224N", "Title": "Natural Language Processing with Deep Learning", "Earned_Units": 3, "Grade": "B"},
        {"Course_ID": "CS 229", "Title": "Machine Learning", "Earned_Units": 3, "Grade": "A"},
        {"Course_ID": "CS 231N", "Title": "Convolutional Neural Networks for Visual Recognition", "Earned_Units": 3, "Grade": "A"},
        {"Course_ID": "CS 246", "Title": "Mining Massive Data Sets", "Earned_Units": 3, "Grade": "C"},
        {"Course_ID": "CS 399", "Title": "Independent Study", "Earned_Units": 6, "Grade": "A"},
    ],
    "Deviations": [
        {
            "Deviated_Course_ID": "None",
            "Approved": False,
            "Approved_By": "None",
        },
    ],
    "Approval": [
        {
            "Approved": False,
            "Approved_By": "None",
            "Approved_Course_ID": "None"
        },
    ],
}

# Function to create constraints for courses taken
def course_constraints(course_ids):
    constraints = []
    for course in transcript.get("Courses_Taken", []):
        course_variable = solver.mkConst(solver.getStringSort(), course["Course_ID"])
        course_constraints = [solver.mkTerm(Kind.EQUAL, course_variable, solver.mkString(course_id)) for course_id in course_ids]
        constraints.append(solver.mkTerm(Kind.OR, *course_constraints))
    return solver.mkTerm(Kind.OR, *constraints)

# Constraint to ensure all courses are taken for a letter grade
letter_grades = ["A", "B", "C", "D", "E"]
letter_grade_constraints = []

for course in transcript.get("Courses_Taken", []):
    grade_variable = solver.mkConst(solver.getStringSort(), course["Grade"])
    letter_grade_constraints = [solver.mkTerm(Kind.EQUAL, grade_variable, solver.mkString(grade)) for grade in letter_grades]

letter_grade_constraint = solver.mkTerm(Kind.AND, *letter_grade_constraints)

# Constraint to ensure courses are taken for 3 or more units
unit_constraints = []

for course in transcript.get("Courses_Taken", []):
    unit_variable = solver.mkConst(solver.getRealSort(), str(course["Earned_Units"]))
    unit_constraints.append(solver.mkTerm(Kind.GEQ, unit_variable, solver.mkReal(3)))

unit_constraint = solver.mkTerm(Kind.AND, *unit_constraints)

# Constraint: At most 6 units of CS 399
cs_399_units = sum(course["Earned_Units"] for course in transcript.get("Courses_Taken", []) if course["Course_ID"] == "CS 399")
cs_399_units_variable = solver.mkConst(solver.getRealSort(), str(cs_399_units))
cs_399_units_constraint = solver.mkTerm(Kind.LEQ, cs_399_units_variable, solver.mkReal(6))

# Constraint: One adviser-approved deviation allowed
deviations = transcript.get("Deviations", [])
approved_deviation = sum(1 for dev in deviations if dev["Approved"] is True)
approved_deviation_variable = solver.mkConst(solver.getIntegerSort(), str(approved_deviation))
deviation_constraint = solver.mkTerm(Kind.LEQ, approved_deviation_variable, solver.mkInteger(1))

# Constraint: CS 221 or equivalent coursework with adviser approval
cs_221_equivalent_approval = [solver.mkTerm(Kind.AND, solver.mkTerm(Kind.EQUAL, solver.mkConst(solver.getStringSort(), "CS 221"), solver.mkString(course["Course_ID"])), solver.mkTerm(Kind.GEQ, solver.mkConst(solver.getRealSort(), str(course["Earned_Units"])), solver.mkReal(3))) for course in transcript["Courses_Taken"]]

cs_221_constraint = solver.mkTerm(Kind.OR, *cs_221_equivalent_approval)
cs_221_with_approval = any(approval["Approved"] is True and approval["Approved_Course_ID"] == "CS 221" for approval in transcript["Approval"])
cs_221_with_approval_constraint = solver.mkConst(solver.getBooleanSort(), cs_221_with_approval)

cs_221_combined_constraint = solver.mkTerm(Kind.OR, cs_221_constraint, cs_221_with_approval_constraint)

# 4 or more courses from the specified list
depth_courses = ["CS 223A", "CS 224N", "CS 224S", "CS 224U", "CS 224V", "CS 224W", "CS 228", "CS 229", "CS 231A", "CS 231N", "CS 234", "CS 237A", "CS 237B", "CS 238"]
depth_course_constraints = course_constraints(depth_courses)
depth_course_count = sum(1 for course in transcript.get("Courses_Taken", []) if course["Course_ID"] in depth_courses)
depth_course_count_variable = solver.mkConst(solver.getIntegerSort(), str(depth_course_count))
depth_course_count_constraint = solver.mkTerm(Kind.GEQ, depth_course_count_variable, solver.mkInteger(4))

# At least 21 units from categories (a), (b), and additional courses
all_courses = depth_courses + ["CS 205L", "CS 224R", "CS 225A", "CS 227B", "CS 229M", "CS 230", "CS 233", "CS 235", "CS 236", "CS 239", "CS 246", "CS 257", "CS 270", "CS 271", "CS 273A", "CS 273B", "CS 274", "CS 275", "CS 279", "CS 281", "CS 322", "CS 324", "CS 325B", "CS 326", "CS 327A", "CS 329", "CS 330", "CS 331B", "CS 332", "CS 333", "CS 345", "CS 348N", "CS 361", "CS 368", "CS 371", "CS 375", "CS 377", "CS 379", "CS 398", "CS 399", "CS 428A", "CS 428B", "CS 432", "EE 263", "EE 276", "EE 278", "EE 364A", "EE 364B", "EE 377", "EE 378B", "ENGR 205", "ENGR 209A", "MS&E 226", "MS&E 252", "PSYCH 209", "STATS 202", "STATS 315A", "STATS 315B"]
total_units = sum(course["Earned_Units"] for course in transcript.get("Courses_Taken", []) if course["Course_ID"] in all_courses)
total_units_variable = solver.mkConst(solver.getRealSort(), str(total_units))
total_units_constraint = solver.mkTerm(Kind.GEQ, total_units_variable, solver.mkReal(21))

# Combine all constraints
final_constraint = solver.mkTerm(Kind.AND, letter_grade_constraint, unit_constraint, cs_399_units_constraint, deviation_constraint, cs_221_combined_constraint, depth_course_constraints, depth_course_count_constraint, total_units_constraint)

solver.assertFormula(final_constraint)
print(solver.checkSat())
```

This code sets up a cvc5 solver to check the constraints for the **Artificial Intelligence Depth** requirement. It ensures that all depth courses are taken for a letter grade, that each course has at least 3 units, limits CS 399 to 6 units, ensures deviations are adviser-approved, checks that CS 221 (or an equivalent approved course) is completed, ensures at least four depth courses are taken, and finally, checks that at least 21 units come from the specified categories.