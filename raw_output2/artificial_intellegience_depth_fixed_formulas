=======================prompt===========================

        Please optimize your generated solver formulas by minimizing the use of
        for loops or if condition checks. The following example is an okay format, because we use a variable in the formula
        to parameterize the formulas as input to the solver: 
        ```python
        variable = solver.mkConst(solver.getStringSort(), "course")
        constraint_1 = [solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString(variable)) for course in transcript.get("Courses_Taken", [])]
        constraint_2 = solver.mkTerm(Kind.EQUAL, solver.mkString(variable), solver.mkString("CS 221"))
        formula = solver.mkTerm(Kind.AND, constraint_1, constraint_2)
        ```
        The following example is NOT an okay format, because the formula is using hard coded values and is NOT parameterized: 
        ```python 
        for course in transcript.get("Courses_Taken", []):
                cs_221 = solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString("CS 221"))
        ```
        Please check the following out and convert for loops and if conditional checks into 
        solver formulas when possible: =======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement ## ARTIFICIAL INTELLIGENCE DEPTH

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) CS 221 (students with equivalent course work may waive with adviser approval)

b) At least four of: CS 223A, 224N, 224S, 224U, 224V, 224W, 228, 229, 231A, 231N, 234, 237A, 237B, 238 

c) A total of at least 21 units from categories (a), (b), and the following: CS 205L, 224R, 225A, 227B, 229M, 230, 233, 235, 236, 239, 246, 257, 270, 271, 273A, 273B, 274, 275, 279, 281, 322, 324, 325B, 326, 327A, 329 (any suffix), 330, 331B, 332, 333, 345, 348N, 361, 368, 371, 375, 377† (any suffix), 379† (any suffix), 398, 399†, 428A, 428B, 432; EE 263, 276, 278, 364A, 364B, 377, 378B; ENGR 205, 209A; MS&E 226, 252; PSYCH 209; STATS 202, 315A, 315B (courses with † notation require approval of MS adviser)

Course number | Title (Depth courses must be taken for at least 3 units.) | Grade | Units
------------ | ------------------------------------------- | ----- | -----
 | | | 

TOTAL DEPTH UNITS APPLIED TO MSCS (must total at least 21 units) 

Letter grades only.* you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        ## ARTIFICIAL INTELLIGENCE DEPTH

All depth courses must be taken for a letter grade* for 3 or more units. A maximum of 6 units of CS 399 Independent Study may be counted towards the depth. Any deviations from the stated requirements must be noted and approved by your adviser in the Adviser Notes box provided (maximum of one adviser-approved deviation allowed). Courses taken for your Stanford undergraduate degree do not need to be repeated. Enter course selection in the table below:

a) CS 221 (students with equivalent course work may waive with adviser approval)

b) At least four of: CS 223A, 224N, 224S, 224U, 224V, 224W, 228, 229, 231A, 231N, 234, 237A, 237B, 238 

c) A total of at least 21 units from categories (a), (b), and the following: CS 205L, 224R, 225A, 227B, 229M, 230, 233, 235, 236, 239, 246, 257, 270, 271, 273A, 273B, 274, 275, 279, 281, 322, 324, 325B, 326, 327A, 329 (any suffix), 330, 331B, 332, 333, 345, 348N, 361, 368, 371, 375, 377† (any suffix), 379† (any suffix), 398, 399†, 428A, 428B, 432; EE 263, 276, 278, 364A, 364B, 377, 378B; ENGR 205, 209A; MS&E 226, 252; PSYCH 209; STATS 202, 315A, 315B (courses with † notation require approval of MS adviser)

Course number | Title (Depth courses must be taken for at least 3 units.) | Grade | Units
------------ | ------------------------------------------- | ----- | -----
 | | | 

TOTAL DEPTH UNITS APPLIED TO MSCS (must total at least 21 units) 

Letter grades only.*. Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the ARTIFICIAL INTELLEGIENCE DEPTH. You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please generate
        formulas with respect to the requirements only. 
        =======================formula ouput===========================

        =======================fixed formula ouput===========================
Sure! Here's how you can transform the given requirements into cvc5 SMT solver formulas for the **Artificial Intelligence Depth**:

```python
from cvc5 import Solver, Kind

# Initialize the solver
solver = Solver()

# Example Transcript Schema
transcript = {
    "Student": {
        "Name": "John Doe",
        "Program": "MSCS",
        "StudentID": 123456,
        "Coterm": False
    },
    "AP_Credits": [
        {"Advanced_Placement": "Math",
         "Earned_Units": 10}
    ],
    "Courses_Taken": [
        {"Course_ID": "CS 221", "Title": "Artificial Intelligence: Principles & Techniques", "Earned_Units": 3, "Grade": "A"},
        {"Course_ID": "CS 229", "Title": "Machine Learning", "Earned_Units": 3, "Grade": "A"},
    ],
    "Deviations": [
        {
            "Deviated_Course_ID": "None",
            "Approved": False,
            "Approved_By": "None",
        },
        {
            "Deviated_Course_ID": "None",
            "Approved": False,
            "Approved_By": "None",
        },
    ],
    "Approval": [
        {
            "Approved": False,
            "Approved_By": "None",
            "Approved_Course_ID": "None"
        },
        {
            "Approved": False,
            "Approved_By": "None",
            "Approved_Course_ID": "None"
        },
    ],
    "Cumulative_GPA": {
        "Undergrad": 3.5,
        "Graduate": 3.7,
    },
}

# Constraint 1: All depth courses must be taken for a letter grade and 3 or more units.
grades_constr = [
    solver.mkTerm(Kind.AND,
                  solver.mkTerm(Kind.GEQ, solver.mkInteger(course.get("Earned_Units", 0)), solver.mkInteger(3)),
                  solver.mkTerm(Kind.OR,
                                solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Grade")), solver.mkString("A")),
                                solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Grade")), solver.mkString("B")),
                                solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Grade")), solver.mkString("C")),
                                solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Grade")), solver.mkString("D")))
                  )
    for course in transcript.get("Courses_Taken", [])
]

depth_courses_set = set([   'CS 221',
                            'CS 223A', 'CS 224N', 'CS 224S', 'CS 224U', 'CS 224V', 'CS 224W', 'CS 228', 'CS 229', 
                            'CS 231A', 'CS 231N', 'CS 234', 'CS 237A', 'CS 237B', 'CS 238', 'CS 205L', 'CS 224R', 'CS 225A', 'CS 227B', 'CS 229M', 'CS 230', 'CS 233', 'CS 235', 
                            'CS 236', 'CS 239', 'CS 246', 'CS 257', 'CS 270', 'CS 271', 'CS 273A', 'CS 273B', 'CS 274', 'CS 275', 'CS 279', 'CS 281', 'CS 322', 'CS 324', 'CS 325B', 
                            'CS 326', 'CS 327A', 'CS 329', 'CS 330', 'CS 331B', 'CS 332', 'CS 333', 'CS 345', 'CS 348N', 'CS 361', 'CS 368', 'CS 371', 'CS 375', 'CS 377', 'CS 379', 
                            'CS 399', 'CS 398', 'CS 399', 'CS 428A', 'CS 428B', 'CS 432']), 'EE 263', 'EE 276', 'EE 278', 'EE 364A', 'EE 364B', 'EE 377', 'EE 378B', 'ENGR 205', 'ENGR 209A', 
                            'MS&E 226', 'MS&E 252', 'PSYCH 209', 'STATS 202', 'STATS 315A', 'STATS 315B'])

# Constraint 2: Check if CS 221 is either taken or waived with adviser's approval.
variable_221 = solver.mkConst(solver.getStringSort(), "course_221")
constraint_courses = [solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString(variable_221)) for course in transcript.get("Courses_Taken", [])]
constraint_221 = solver.mkTerm(Kind.OR, solver.mkTerm(Kind.OR, *constraint_courses), 
                               solver.mkTerm(Kind.AND, 
                                             solver.mkTerm(Kind.EQUAL, solver.mkString(variable_221), solver.mkString("None")), 
                                             solver.mkTerm(Kind.EQUAL, solver.mkBool(transcript.get('Approval')[0].get("Approved", False)), solver.mkBool(True))
                                             ))

# Constraint 3: At least four of the depth courses must be from the specified set of courses.
specified_courses = ['CS 223A', 'CS 224N', 'CS 224S', 'CS 224U', 'CS 224V', 'CS 224W', 'CS 228', 'CS 229', 'CS 231A', 'CS 231N', 'CS 234', 'CS 237A', 'CS 237B', 'CS 238']

# Variables for the depth courses (at least 4)
depth_courses_count = 4
depth_variables = [solver.mkConst(solver.getStringSort(), f"course_{i}") for i in range(depth_courses_count)]
constraints_depth_each = [[solver.mkTerm(Kind.EQUAL, course_variable, solver.mkString(course_unit)) for course_unit in specified_courses] for course_variable in depth_variables]
constraints_depth_or = [solver.mkTerm(Kind.OR, *constraints_set) for constraints_set in constraints_depth_each]
constraint_depth = solver.mkTerm(Kind.AND, *constraints_depth_or)

# Constraint 4: A total of at least 21 units from all valid courses.
variable_unit_sum = sum([course.get('Earned_Units') for course in transcript["Courses_Taken"] if course.get("Course_ID") in depth_courses_set])
constraint_valid_units = solver.mkTerm(Kind.GEQ, solver.mkInteger(variable_unit_sum), solver.mkInteger(21))

# Constraint 5: No more than 6 units of CS 399 can be counted
cs_399_units = sum([course.get('Earned_Units') for course in transcript["Courses_Taken"] if course.get("Course_ID") == "CS 399"])
constraint_399_units = solver.mkTerm(Kind.LEQ, solver.mkInteger(cs_399_units), solver.mkInteger(6))

# Constraint 6: At most one adviser-approved deviation is allowed.
deviations_count = sum([1 for dev in transcript.get('Deviations', []) if dev.get('Approved', False)])
constraint_deviation_count = solver.mkTerm(Kind.LEQ, solver.mkInteger(deviations_count), solver.mkInteger(1))

# And all constraints together into the final formula
final_formula = solver.mkTerm(Kind.AND, *grades_constr, constraint_221, constraint_depth, constraint_valid_units, constraint_399_units, constraint_deviation_count)

# Assert the formula in the solver
solver.assertFormula(final_formula)

# Check satisfiability
result = solver.checkSat()

print("Satisfiability: ", result)
```