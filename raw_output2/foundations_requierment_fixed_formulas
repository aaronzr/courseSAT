=======================prompt===========================

        Please optimize your generated solver formulas by minimizing the use of
        for loops or if condition checks. The following example is an okay format, because we use a variable in the formula
        to parameterize the formulas as input to the solver: 
        ```python
        variable = solver.mkConst(solver.getStringSort(), "course")
        constraint_1 = [solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString(variable)) for course in transcript.get("Courses_Taken", [])]
        constraint_2 = solver.mkTerm(Kind.EQUAL, solver.mkString(variable), solver.mkString("CS 221"))
        formula = solver.mkTerm(Kind.AND, constraint_1, constraint_2)
        ```
        The following example is NOT an okay format, because the formula is using hard coded values and is NOT parameterized: 
        ```python 
        for course in transcript.get("Courses_Taken", []):
                cs_221 = solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString("CS 221"))
        ```
        Please check the following out and convert for loops and if conditional checks into 
        solver formulas when possible: =======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement ### FOUNDATIONS REQUIREMENT:

You must satisfy the requirements listed in each of the following areas; all courses taken elsewhere must be approved by your adviser via the foundation course waiver form. Do not enter anything in the “Units” column for courses taken elsewhere or for Stanford courses counted towards your undergraduate degree.

| Required                          | Equivalent elsewhere (course numbers/titles/institution) | Grade | Units |
|-----------------------------------|----------------------------------------------------------|-------|-------|
| Logic, Automata & Complexity (CS103) |                                                          |       |       |
| Probability (CS109, Stat116, CME106, MS&E220, or EE178) |                                              |       |       |
| Algorithmic Analysis (CS161)       |                                                          |       |       |
| Computer Organ & Sys (CS107 or 107E) |                                                         |       |       |
| Principles of Computer Systems (CS110 or CS111) |                                               |       |       |

**TOTAL UNITS USED TO SATISFY FOUNDATIONS REQUIREMENT (May not exceed 10 units.)**

 you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        ### FOUNDATIONS REQUIREMENT:

You must satisfy the requirements listed in each of the following areas; all courses taken elsewhere must be approved by your adviser via the foundation course waiver form. Do not enter anything in the “Units” column for courses taken elsewhere or for Stanford courses counted towards your undergraduate degree.

| Required                          | Equivalent elsewhere (course numbers/titles/institution) | Grade | Units |
|-----------------------------------|----------------------------------------------------------|-------|-------|
| Logic, Automata & Complexity (CS103) |                                                          |       |       |
| Probability (CS109, Stat116, CME106, MS&E220, or EE178) |                                              |       |       |
| Algorithmic Analysis (CS161)       |                                                          |       |       |
| Computer Organ & Sys (CS107 or 107E) |                                                         |       |       |
| Principles of Computer Systems (CS110 or CS111) |                                               |       |       |

**TOTAL UNITS USED TO SATISFY FOUNDATIONS REQUIREMENT (May not exceed 10 units.)**

. Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the FOUNDATIONS REQUIERMENT. You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that not all taken couses in the transcript satisfy the given requierments. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================

        =======================fixed formula ouput===========================
Here's how you can generate CVC5 Python solver formulas for the specified FOUNDATIONS REQUIREMENT. The constraints will include mandatory course checking, approval deviations, and unit limitations.

```python
from cvc5 import Solver, Kind

solver = Solver()
solver.setOption("produce-models", "true")

# Define course requirements with course IDs
required_courses = {
    "Logic_Automata_Complexity": "CS 103",
    "Probability": ["CS 109", "Stat 116", "CME 106", "MS&E 220", "EE 178"],
    "Algorithmic_Analysis": "CS 161",
    "Computer_Org_Sys": ["CS 107", "CS 107E"],
    "Principles_Computer_Systems": ["CS 110", "CS 111"]
}

# Create course variables
course_vars = {
    key: solver.mkConst(solver.getStringSort(), key) 
    for key in required_courses
}

# Constraints based on course taken in transcript
taken_courses = [solver.mkTerm(Kind.EQUAL, course_var, solver.mkString(course.get("Course_ID"))) 
                 for course in transcript.get("Courses_Taken", []) 
                 for course_var in course_vars.values()]

# Constraints for specific course conditions
specific_constraints = []
for key, value in required_courses.items():
    course_var = course_vars[key]
    if isinstance(value, list):
        specific_constraints.append(
            solver.mkTerm(Kind.OR, *[solver.mkTerm(Kind.EQUAL, course_var, solver.mkString(course)) for course in value])
        )
    else:
        specific_constraints.append(solver.mkTerm(Kind.EQUAL, course_var, solver.mkString(value)))

# Constraints to ensure courses are not duplicated
unique_constraints = [
    solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, var1, var2)) 
    for i, var1 in enumerate(course_vars.values()) 
    for j, var2 in enumerate(course_vars.values()) 
    if i < j
]

# Constraints for advisor approval on deviations
deviation_constraints = []
for dev in transcript.get("Deviations", []):
    if dev.get("Approved", False):
        deviation_constraints.append(solver.mkTerm(Kind.EQUAL, solver.mkString(dev.get("Deviated_Course_ID")), solver.mkString(dev.get("Approved_By"))))
approved_courses = [
    solver.mkTerm(Kind.EQUAL, solver.mkString(approved.get("Approved_Course_ID")), solver.mkString(approved.get("Approved_By"))) 
    for approved in transcript.get("Approval", []) 
    if approved.get("Approved", False)
]

# Logics for unit constraints
total_units = solver.mkConsts(solver.getIntegerSort(), "total_units")
required_units = solver.mkConst(solver.getIntegerSort(), 10)

unit_constraints = [
    solver.mkTerm(Kind.LEQ, total_units, required_units)
]

# Combine all constraints into a final formula
all_constraints = taken_courses + specific_constraints + unique_constraints + deviation_constraints + approved_courses + unit_constraints
final_formula = solver.mkTerm(Kind.AND, *all_constraints)

# Assert the final formula to the solver
solver.assertFormula(final_formula)
```

This code systematically crafts parameterized CVC5 solver formulas for each of your required constraints in the foundations requirement. Each step ensures that respective courses are taken, no courses are duplicated, each deviation is approved, and total units are bounded by 10.