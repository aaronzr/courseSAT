=======================prompt===========================

        Please optimize your generated solver formulas by minimizing the use of
        for loops or if condition checks. The following example is an okay format, because we use a variable in the formula
        to parameterize the formulas as input to the solver: 
        ```python
        variable = solver.mkConst(solver.getStringSort(), "course")
        constraint_1 = [solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString(variable)) for course in transcript.get("Courses_Taken", [])]
        constraint_2 = solver.mkTerm(Kind.EQUAL, solver.mkString(variable), solver.mkString("CS 221"))
        formula = solver.mkTerm(Kind.AND, constraint_1, constraint_2)
        ```
        The following example is NOT an okay format, because the formula is using hard coded values and is NOT parameterized: 
        ```python 
        for course in transcript.get("Courses_Taken", []):
                cs_221 = solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString("CS 221"))
        ```
        Please check the following out and convert for loops and if conditional checks into 
        solver formulas when possible: =======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement ELECTIVES

List here any additional courses used to complete the 45-unit requirement for the MSCS degree. You may count up to a maximum of 3 units of 1-2 unit seminars offered in the School of Engineering. All other electives must be taken for 3 or more units. CS courses numbered above 111, excluding CS196, CS198, and CS390A/B/C, can be used as MS electives. Non-CS courses must be technical courses numbered above 100, related to the degree program, and approved by the adviser and the MS program administrator. Note that CS 129 may not be counted towards the MS if CS 229 is being counted towards any BS or MS requirement.

Course number Title Grade Units

TOTAL ELECTIVE UNITS APPLIED TO MSCS

TOTAL UNITS APPLIED TO MSCS you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        ELECTIVES

List here any additional courses used to complete the 45-unit requirement for the MSCS degree. You may count up to a maximum of 3 units of 1-2 unit seminars offered in the School of Engineering. All other electives must be taken for 3 or more units. CS courses numbered above 111, excluding CS196, CS198, and CS390A/B/C, can be used as MS electives. Non-CS courses must be technical courses numbered above 100, related to the degree program, and approved by the adviser and the MS program administrator. Note that CS 129 may not be counted towards the MS if CS 229 is being counted towards any BS or MS requirement.

Course number Title Grade Units

TOTAL ELECTIVE UNITS APPLIED TO MSCS

TOTAL UNITS APPLIED TO MSCS. Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the ELECTIVES. You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that not all taken couses in the transcript satisfy the given requierments. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================

        =======================fixed formula ouput===========================
Certainly! Below is the cvc5 solver script to verify the elective requirements for the MSCS degree based on the given information. Each requirement is parameterized using variables and leveraging the solver's terms.

```python
import cvc5

# Initialize the solver and sorts
solver = cvc5.Solver()
string_sort = solver.getStringSort()
integer_sort = solver.getIntegerSort()
bool_sort = solver.getBooleanSort()

# Variables
course_id = solver.mkConst(string_sort, "course_id")
earned_units = solver.mkConst(integer_sort, "earned_units")
course_title = solver.mkConst(string_sort, "course_title")
grade = solver.mkConst(string_sort, "grade")
total_units_mscs = solver.mkConst(integer_sort, "total_units_mscs")
total_elective_units = solver.mkConst(integer_sort, "total_elective_units")
advisor_approval = solver.mkConst(bool_sort, "advisor_approval")

# Constraint to ensure up to a maximum of 3 units of 1-2 unit seminars
seminar_constraint = [
    solver.mkTerm(cvc5.Kind.LEQ, 
                  solver.mkTerm(cvc5.Kind.SUM, 
                                [solver.mkTerm(cvc5.Kind.ITE, 
                                               solver.mkTerm(cvc5.Kind.AND,
                                                            solver.mkTerm(cvc5.Kind.LEQ, solver.mkInteger(1), earned_units),
                                                            solver.mkTerm(cvc5.Kind.LEQ, earned_units, solver.mkInteger(2))),
                                               earned_units, solver.mkInteger(0)) 
                                 for course in transcript.get("Courses_Taken", [])]),
                  solver.mkInteger(3))
]

# Constraint to ensure non-seminar courses are taken for 3 or more units
non_seminar_constraint = [
   solver.mkTerm(cvc5.Kind.GEQ, earned_units, solver.mkInteger(3)) 
   for course in transcript.get("Courses_Taken", []) 
   if course["Earned_Units"] > 2
]

# Constraint for CS courses numbered above 111, excluding CS196, CS198, CS390A/B/C
cs_course_constraints = [
    solver.mkTerm(cvc5.Kind.AND,
                  solver.mkTerm(cvc5.Kind.GT, solver.mkReal(course_id[2:]), solver.mkInteger(111)),
                  solver.mkTerm(cvc5.Kind.NOT, 
                                solver.mkTerm(cvc5.Kind.OR,
                                              solver.mkTerm(cvc5.Kind.EQUAL, course_id, solver.mkString("CS196")),
                                              solver.mkTerm(cvc5.Kind.EQUAL, course_id, solver.mkString("CS198")),
                                              solver.mkTerm(cvc5.Kind.EQUAL, course_id, solver.mkString("CS390A")),
                                              solver.mkTerm(cvc5.Kind.EQUAL, course_id, solver.mkString("CS390B")),
                                              solver.mkTerm(cvc5.Kind.EQUAL, course_id, solver.mkString("CS390C")))))
    for course in transcript.get("Courses_Taken", []) 
    if course["Course_ID"].startswith("CS")
]

# Constraint for non-CS courses technical and above 100, with approval
non_cs_course_constraints = [
    solver.mkTerm(cvc5.Kind.AND,
                  solver.mkTerm(cvc5.Kind.GT, solver.mkReal(course_id[2:]), solver.mkInteger(100)),
                  solver.mkTerm(cvc5.Kind.OR, 
                                solver.mkTerm(cvc5.Kind.EQUAL, advisor_approval, solver.mkBoolean(True))))
    for course in transcript.get("Courses_Taken", []) 
    if not course["Course_ID"].startswith("CS")
]

# Constraint for totaling elective units applied to MSCS
elective_units_constraint = solver.mkTerm(cvc5.Kind.LEQ, 
                                          solver.mkTerm(
                                              cvc5.Kind.SUM,
                                              [solver.mkTerm(solver.mkInteger(course["Earned_Units"])) for course in transcript.get('Courses_Taken', [])
                                                ]
                                          ), total_elective_units)

# Constraint for the constraint CS 129 and CS 229 coexistence
cs_129_229_constraint = solver.mkTerm(
    cvc5.Kind.IMPLIES,
    solver.mkTerm(cvc5.Kind.OR,
                  solver.mkTerm(cvc5.Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS129")),
                  solver.mkTerm(cvc5.Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS229"))),
    solver.mkTerm(cvc5.Kind.NOT,
                  solver.mkTerm(cvc5.Kind.AND,
                                solver.mkTerm(cvc5.Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS129")),
                                solver.mkTerm(cvc5.Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS229"))))
)

# Cumulative constraints combining all the individual constraints
combined_constraints = solver.mkTerm(
    cvc5.Kind.AND,
    *seminar_constraint,
    *non_seminar_constraint,
    *cs_course_constraints,
    *non_cs_course_constraints,
    elective_units_constraint,
    cs_129_229_constraint
)

solver.assertFormula(combined_constraints)
solver.checkSat()
print(solver.getModel())
```

This code parameterizes the given requirements into cvc5 solver formulas using constraints instead of hardcoding values. Each constraint is based on the MSCS degree requirements:

- Only a maximum of 3 units from 1-2 unit seminars are allowed.
- Non-seminar electives should be taken for 3 or more units.
- CS courses numbered above 111, excluding specific courses.
- Non-CS technical courses numbered above 100, with advisor approval.
- Ensure the total elective units meet the requirement.
- Ensure CS 129 and CS 229 constraints are not violated.