=======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement ### FOUNDATIONS REQUIREMENT:

You must satisfy the requirements listed in each of the following areas; all courses taken elsewhere must be approved by your adviser via the foundation course waiver form. Do not enter anything in the “Units” column for courses taken elsewhere or for Stanford courses counted towards your undergraduate degree.

| Required                          | Equivalent elsewhere (course numbers/titles/institution) | Grade | Units |
|-----------------------------------|----------------------------------------------------------|-------|-------|
| Logic, Automata & Complexity (CS103) |                                                          |       |       |
| Probability (CS109, Stat116, CME106, MS&E220, or EE178) |                                              |       |       |
| Algorithmic Analysis (CS161)       |                                                          |       |       |
| Computer Organ & Sys (CS107 or 107E) |                                                         |       |       |
| Principles of Computer Systems (CS110 or CS111) |                                               |       |       |

**TOTAL UNITS USED TO SATISFY FOUNDATIONS REQUIREMENT (May not exceed 10 units.)**

 you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        ### FOUNDATIONS REQUIREMENT:

You must satisfy the requirements listed in each of the following areas; all courses taken elsewhere must be approved by your adviser via the foundation course waiver form. Do not enter anything in the “Units” column for courses taken elsewhere or for Stanford courses counted towards your undergraduate degree.

| Required                          | Equivalent elsewhere (course numbers/titles/institution) | Grade | Units |
|-----------------------------------|----------------------------------------------------------|-------|-------|
| Logic, Automata & Complexity (CS103) |                                                          |       |       |
| Probability (CS109, Stat116, CME106, MS&E220, or EE178) |                                              |       |       |
| Algorithmic Analysis (CS161)       |                                                          |       |       |
| Computer Organ & Sys (CS107 or 107E) |                                                         |       |       |
| Principles of Computer Systems (CS110 or CS111) |                                               |       |       |

**TOTAL UNITS USED TO SATISFY FOUNDATIONS REQUIREMENT (May not exceed 10 units.)**

. Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the FOUNDATIONS REQUIERMENT. You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that not all taken couses in the transcript satisfy the given requierments. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================
Certainly! Below, you'll find the cvc5 solver code for the constraints specified in the FOUNDATIONS REQUIREMENT:

### CODE

```python
from cvc5 import Solver, Kind, Term

# Initialize SmtSolver
solver = Solver()

# Assuming the following schema
transcript = {
    "Student": {
        "Name": "John Doe",
        "Program": "CS",
        "StudentID": 1234567,
        "Coterm": False
    },
    "AP_Credits": [
        {"Advanced_Placement": "AP Calculus", "Earned_Units": 5}
    ],
    "Courses_Taken": [
        {"Course_ID": 103, "Title": "Logic, Automata & Complexity (CS103)", "Earned_Units": 5, "Grade": "A"},
        {"Course_ID": 109, "Title": "Probability (CS109)", "Earned_Units": 5, "Grade": "B"},
        {"Course_ID": 161, "Title": "Algorithmic Analysis (CS161)", "Earned_Units": 3, "Grade": "B"},
        {"Course_ID": 107, "Title": "Computer Organ & Sys (CS107)", "Earned_Units": 4, "Grade": "B"},
        {"Course_ID": 110, "Title": "Principles of Computer Systems (CS110)", "Earned_Units": 3, "Grade": "A"}
    ],
    "Deviations": [
        {
            "Deviated_Course_ID": "None",
            "Approved": False,
            "Approved_By": "None",
        }
    ],
    "Approval": [
        {
            "Approved": True,
            "Approved_By": "Prof. Smith",
            "Approved_Course_ID": "111"
        }
    ],
    "Cumulative_GPA": {
        "Undergrad": 3.5,
        "Graduate": 0.0,
    }
}

# Helper function to create course constraints
def create_course_constraint(course_ids, courses_taken):
    constraints_set = []
    for course_id in course_ids:
        course_const = solver.mkConst(solver.getStringSort(), f"course_{course_id}")
        course_constraints = [solver.mkTerm(Kind.EQUAL, course_const, solver.mkString(course["Course_ID"])) for course in courses_taken]
        constraints_set.append(solver.mkTerm(Kind.OR, *course_constraints))
    return solver.mkTerm(Kind.AND, *constraints_set)

course_titles = [
    "Logic, Automata & Complexity (CS103)",
    "Probability (CS109, Stat116, CME106, MS&E220, or EE178)",
    "Algorithmic Analysis (CS161)",
    "Computer Organ & Sys (CS107 or 107E)",
    "Principles of Computer Systems (CS110 or CS111)"
]

# Generate constraints for each required course
cs103_constraint = create_course_constraint(["103"], transcript["Courses_Taken"])
probability_constraint = create_course_constraint(["109", "116", "106", "220", "178"], transcript["Courses_Taken"])
cs161_constraint = create_course_constraint(["161"], transcript["Courses_Taken"])
cs107_or_107E_constraint = create_course_constraint(["107", "107E"], transcript["Courses_Taken"])
cs110_or_111_constraint = create_course_constraint(["110", "111"], transcript["Courses_Taken"])

# Combine all constraints for courses
course_constraints = solver.mkTerm(Kind.AND, cs103_constraint, 
                                    probability_constraint, 
                                    cs161_constraint, 
                                    cs107_or_107E_constraint, 
                                    cs110_or_111_constraint)

# Constraints for approved deviations
deviation_constraints = []
for deviation in transcript["Deviations"]:
    if deviation["Approved"]:
        deviation_constraints.append(solver.mkTerm(Kind.EQUAL, solver.mkString(deviation["Deviated_Course_ID"]), solver.mkConst(solver.getStringSort(), "Deviated_Course_ID_Approved")))
    else:
        deviation_constraints.append(solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(deviation["Deviated_Course_ID"]), solver.mkConst(solver.getStringSort(), "Deviated_Course_ID_Approved"))))

# Constraints for approved courses
approval_constraints = []
for approval in transcript["Approval"]:
    if approval["Approved"]:
        approval_constraints.append(solver.mkTerm(Kind.EQUAL, solver.mkString(approval["Approved_Course_ID"]), solver.mkConst(solver.getStringSort(), "Approved_Course_ID")))
    else:
        approval_constraints.append(solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(approval["Approved_Course_ID"]), solver.mkConst(solver.getStringSort(), "Approved_Course_ID"))))

# Combine deviation and approval constraints
deviation_approval_constraints = solver.mkTerm(Kind.AND, *deviation_constraints, *approval_constraints)

# Total units constraint (Not to exceed 10 units)
units_constraints = []
total_units = sum(course["Earned_Units"] for course in transcript["Courses_Taken"])
units_constraints.append(solver.mkTerm(Kind.LEQ, solver.mkReal(total_units), solver.mkReal(10)))


# Combine all constraints into a single formula
final_constraints = solver.mkTerm(Kind.AND, course_constraints, 
                                    deviation_approval_constraints, 
                                    *units_constraints)

# Assert final constraints
solver.assertFormula(final_constraints)

# Check satisfiability
result = solver.checkSat()
print("Satisfiability of the transcript: ", result)
```

### Explanation
- **Creating Course Constraints:** Functions `create_course_constraint` accepts course IDs and creates constraints to ensure each required course is in the transcript.
- **Combining Constraints:** Logical AND is used to combine individual constraints including those for approved deviations and total units.
- **Total Units Check:** Ensures total units do not exceed 10.
  
This script will help verify if a given transcript schema meets the defined constraints for the Foundations Requirement as per the problem statement.