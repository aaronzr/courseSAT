=======================prompt===========================

        Please optimize your generated solver formulas by minimizing the use of
        for loops or if condition checks. The following example is an okay format, because we use a variable in the formula
        to parameterize the formulas as input to the solver: 
        ```python
        variable = solver.mkConst(solver.getStringSort(), "course")
        constraint_1 = [solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString(variable)) for course in transcript.get("Courses_Taken", [])]
        constraint_2 = solver.mkTerm(Kind.EQUAL, solver.mkString(variable), solver.mkString("CS 221"))
        formula = solver.mkTerm(Kind.AND, constraint_1, constraint_2)
        ```
        The following example is NOT an okay format, because the formula is using hard coded values and is NOT parameterized: 
        ```python 
        for course in transcript.get("Courses_Taken", []):
                cs_221 = solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString("CS 221"))
        ```
        Please check the following out and convert for loops and if conditional checks into 
        solver formulas when possible: =======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement ELECTIVES:

List here any additional courses used to complete the 45-unit requirement for the MSCS degree. You may count up to a maximum of 3 units of 1-2 unit seminars offered in the School of Engineering. All other electives must be taken for 3 or more units. CS courses numbered above 111, excluding CS196, CS198, and CS390A/B/C, can be used as MS electives. Non-CS courses must be technical courses numbered above 100, related to the degree program, and approved by the adviser and the MS program administrator. Note that CS 129 may not be counted towards the MS if CS 229 is being counted towards any BS or MS requirement.

Course number Title Grade Units

TOTAL ELECTIVE UNITS APPLIED TO MSCS

TOTAL UNITS APPLIED TO MSCS you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        ELECTIVES:

List here any additional courses used to complete the 45-unit requirement for the MSCS degree. You may count up to a maximum of 3 units of 1-2 unit seminars offered in the School of Engineering. All other electives must be taken for 3 or more units. CS courses numbered above 111, excluding CS196, CS198, and CS390A/B/C, can be used as MS electives. Non-CS courses must be technical courses numbered above 100, related to the degree program, and approved by the adviser and the MS program administrator. Note that CS 129 may not be counted towards the MS if CS 229 is being counted towards any BS or MS requirement.

Course number Title Grade Units

TOTAL ELECTIVE UNITS APPLIED TO MSCS

TOTAL UNITS APPLIED TO MSCS. Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the ELECTIVES:

List here any additional courses used to complete the 45-unit requirement for the MSCS degree. You may count up to a maximum of 3 units of 1-2 unit seminars offered in the School of Engineering. All other electives must be taken for 3 or more units. CS courses numbered above 111, excluding CS196, CS198, and CS390A/B/C, can be used as MS electives. Non-CS courses must be technical courses numbered above 100, related to the degree program, and approved by the adviser and the MS program administrator. Note that CS 129 may not be counted towards the MS if CS 229 is being counted towards any BS or MS requirement.

Course number Title Grade Units

TOTAL ELECTIVE UNITS APPLIED TO MSCS

TOTAL UNITS APPLIED TO MSCS. You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that your formulas should check taken courses in the transcript against each contraint and requirement. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================
. Please make sure you output parameterized solver formulas
        covering each constraint in ELECTIVES:

List here any additional courses used to complete the 45-unit requirement for the MSCS degree. You may count up to a maximum of 3 units of 1-2 unit seminars offered in the School of Engineering. All other electives must be taken for 3 or more units. CS courses numbered above 111, excluding CS196, CS198, and CS390A/B/C, can be used as MS electives. Non-CS courses must be technical courses numbered above 100, related to the degree program, and approved by the adviser and the MS program administrator. Note that CS 129 may not be counted towards the MS if CS 229 is being counted towards any BS or MS requirement.

Course number Title Grade Units

TOTAL ELECTIVE UNITS APPLIED TO MSCS

TOTAL UNITS APPLIED TO MSCS.
        =======================fixed formula ouput===========================
Here's a set of parameterized cvc5 solver formulas to cover every constraint in the "ELECTIVES" requirements for the given transcript schema:

```python
import cvc5
from cvc5 import Kind

solver = cvc5.Solver()

# Initialize the necessary variables
course_variable = solver.mkConst(solver.getStringSort(), "course")

# Load the transcript data as an example
transcript = {
    "Student": {
        "Name": "John Doe",
        "Program": "MSCS", 
        "StudentID": 123456789,
        "Coterm": False
    },
    "AP_Credits": [
        {"Advanced_Placement": "AP Calculus", "Earned_Units": 9}          
    ],
    "Courses_Taken": [
        {"Course_ID": "CS 221", "Title": "Artificial Intelligence", "Earned_Units": 3, "Grade": "A"},
        {"Course_ID": "CS 110", "Title": "Programming Abstractions", "Earned_Units": 5, "Grade": "A-"},
        {"Course_ID": "ENG 300A", "Title": "Special Topics in Engineering", "Earned_Units": 2, "Grade": "B+"},
        {"Course_ID": "CS 129", "Title": "Machine Learning", "Earned_Units": 3, "Grade": "B"},
        {"Course_ID": "CS 229", "Title": "Machine Learning", "Earned_Units": 3, "Grade": "B+"},
    ],
    "Deviations": [
        {
            "Deviated_Course_ID": "CS 150",
            "Approved": True,
            "Approved_By": "Prof. XYZ"
        }
    ],
    "Approval": [
        {
            "Approved": True,
            "Approved_By": "Prof. XYZ",
            "Approved_Course_ID": "ENG 300A"
        }
    ],    
    "Cumulative_GPA": {
        "Undergrad": 3.8,
        "Graduate": 3.9,
    }
}

# Formula to collect all course IDs and units
courses_general_ids = [solver.mkString(course.get("Course_ID")) for course in transcript.get("Courses_Taken", [])]
courses_general_units = [solver.mkInteger(course.get("Earned_Units")) for course in transcript.get("Courses_Taken", [])]

# Formula to ensure CS courses are numbered above 111 and exclude specific courses
valid_courses_ids_constraint = [
    solver.mkTerm(
        Kind.OR,
        solver.mkTerm(
            Kind.AND,
            solver.mkTerm(Kind.GREATER, solver.mkInteger(course_id.split(' ')[1]), solver.mkInteger(111)),
            solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS 196"))),
            solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS 198"))),
            solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS 390A"))),
            solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS 390B"))),
            solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS 390C")))
        ),
        solver.mkTerm(
            Kind.AND,
            solver.mkTerm(Kind.GREATER, solver.mkInteger(course_id.split(' ')[1]), solver.mkInteger(100)),
            solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS 129"))),
            solver.mkTerm(KindImplies,
                solver.mkTerm(Kind.EQUAL, solver.mkString(course_id), solver.mkString("CS 229")),
                solver.mkTerm(Kind.OR,
                    solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.AND, *[solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString("CS 229")) for course in transcript.get("Courses_Taken", [])])),
                    solver.mkTerm(Kind.NOT, solver.mkTerm(Kind.AND, *[solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString("CS 129")) for course in transcript.get("Courses_Taken", [])]))
                )
            )
        )
    )
    for course_id in courses_general_ids
]

# Constraint that essentially allows a maximum of 3 units of 1-2 unit seminars and remaining with 3 or more units
units_constraint = [
    solver.mkTerm(
        Kind.OR,
        solver.mkTerm(
            Kind.AND,
            solver.mkTerm(Kind.LEQ, course_units, solver.mkInteger(2)),
            solver.mkTerm(Kind.LEQ, solver.mkSum(*[solver.mkTerm(Kind.ITE, solver.mkTerm(Kind.LEQ, units, solver.mkInteger(2)), units, solver.mkInteger(0)) for units in courses_general_units]), solver.mkInteger(3))
        ),
        solver.mkTerm(Kind.GEQ, course_units, solver.mkInteger(3))
    )
    for course_units in courses_general_units
]

# Constraints for advisor-approved non-CS technical courses above 100 that are related to the program
advisor_approval_constraint = [
    solver.mkTerm(Kind.OR, *[solver.mkTerm(Kind.EQUAL, solver.mkString(course.get("Course_ID")), solver.mkString(approval.get("Approved_Course_ID"))) for approval in transcript.get("Approval", [])])
    for course in transcript.get("Courses_Taken", [])
]

# Combining all the constraints
formula = solver.mkTerm(Kind.AND, *(valid_courses_ids_constraint + units_constraint + advisor_approval_constraint))

# Assert the formula to the solver
solver.assertFormula(formula)

# Check for feasibility
result = solver.checkSat()
print(f"ELECTIVES constraints are {'satisfiable' if result.isSat() else 'not satisfiable'}")
```

These formulas deal with the constraints by using parameterized variables with respect to the transcript schema. They include:

1. Ensuring valid course IDs:
    - CS courses must be numbered 111 or higher and not be CS196, CS198, or CS390A/B/C.
    - Checking that CS129 and CS229 are not both counted if one is being used.
2. Handling seminars:
    - Ensuring that a maximum of 3 units can be taken from 1-2 unit seminars.
    - Other electives must be 3 or more units.
3. Ensuring advisor-approved non-CS technical courses are considered.

These constraints ensure the courses and units align with the MSCS degree requirements, covering parameterized variables accordingly.