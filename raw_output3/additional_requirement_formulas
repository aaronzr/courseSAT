=======================prompt===========================

        Your task is to generate cvc5 python solver formulas for the constraints in each requirement ADDITIONAL REQUIREMENTS
- All courses submitted for the MSCS degree must be numbered 100 or greater.
- At most 10 units of Foundations requirement courses may be counted toward your 45 units.
- At most 3 units of 1-2 unit seminars may be counted toward your 45 units.
- At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade.*
- The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale).
- Units previously applied toward BS requirements may not also be counted toward the MSCS.
- You must complete at least 45 graduate units at Stanford before receiving the MSCS degree.

*All classes taken Spring 19-20 and Fall through Summer 20-21 for a CR or S grade will satisfy MSCS requirements as if taken for a letter grade. you have identified.
        Your formulas should include every constrint, including the ones related to advisor approval and deviations.
        The formulas will check satisfiability of a given transcript schema template as input in the following format: 
                ```json
        transcript = {
        "Student": {
                "Name": String,
                "Program": String, 
                "StudentID": Integer,
                "Coterm": Boolean
        },
        "AP_Credits": [
                {"Advanced_Placement": String,
                  "Earned_Units": Integer                   
                }
        ]
        "Courses_Taken": [
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String},
                {"Course_ID": Integer, "Title": String, "Earned_Units": Integer, "Grade": String}, 
                ...
        ]
        "Deviations": [
                {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
          {
                "Deviated_Course_ID": String or "None" when "Approved"==false
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
        },
        ]
        "Approval": [
                {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
          {
                "Approved": Boolean,
                "Approved_By": String or "None" when "Approved"==false,
                "Approved_Course_ID": String or "None" when "Approved"==false
        },
        ]    
        "Cumulative_GPA": {
                "Undergrad": Real,
                "Graduate": Real,
        },
        }
        ```
        Given a transcript schema as input variables, please generate cvc5 smt solver formulas for each constraint in the 
        ADDITIONAL REQUIREMENTS
- All courses submitted for the MSCS degree must be numbered 100 or greater.
- At most 10 units of Foundations requirement courses may be counted toward your 45 units.
- At most 3 units of 1-2 unit seminars may be counted toward your 45 units.
- At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade.*
- The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale).
- Units previously applied toward BS requirements may not also be counted toward the MSCS.
- You must complete at least 45 graduate units at Stanford before receiving the MSCS degree.

*All classes taken Spring 19-20 and Fall through Summer 20-21 for a CR or S grade will satisfy MSCS requirements as if taken for a letter grade.. Below is an example formula for a given requiremet: Students must take one of the courses in (CS 100, CS 101, CS 102)
        and one of the courses in (CS 101, CS 102, CS 103). The same course cannot be used to satisfy two different requirements.
        ```
        course_variable_1 = solver.mkConst(solver.getStringSort(), "course1")
	course_variable_2 = solver.mkConst(solver.getStringSort(), "course2")
	#Course1 is \in transcript[*].course; 
	#Course2 is \in transcript[*].course;
	constraints_set1 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraints_set2 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course.get("Course_ID")))for course in transcript.get("Courses_Taken", [])]
	constraint_1 = solver.mkTerm(Kind.OR, *constraints_set1)
	constraint_2 = solver.mkTerm(Kind.OR, *constraints_set2)
 	#Course1 is in one of (100,101,102)
	#Course2 is in one of (101, 102, 103)
	constraints_set3 = [solver.mkTerm(Kind.EQUAL, course_variable_1, solver.mkString(course_unit))for course_unit in ['CS 100', 'CS 101', 'CS 102']]
	constraints_set4 = [solver.mkTerm(Kind.EQUAL, course_variable_2, solver.mkString(course_unit))for course_unit in ['CS 101', 'CS 102', 'CS 103']]
	constraint_3 = solver.mkTerm(Kind.OR, *constraints_set3)
	constraint_4 = solver.mkTerm(Kind.OR, *constraints_set4)
	#AND all previous individual constraints
	#Course1 is \in transcript[*].course AND 
	#Course2 is \in transcript[*].course AND
  	#Course1 is in one of (100,101,102)AND
	#Course2 is in one of (101, 102, 103)AND
 
	constraint_5 = solver.mkTerm(Kind.AND, constraint_1, constraint_2, constraint_3, constraint_4)
	#The same course cannot be used to satisfy two different requirements: 
	#course_1 == coures_2
	constraint_6 = solver.mkTerm(Kind.EQUAL, course_variable_1, course_variable_2)
	#NEGATE(course_1 == coures_2)=> course_1 != coures_2
	constraint_7 = solver.mkTerm(Kind.NOT, constraint_6)
	#final formula:
	formula = solver.mkTerm(Kind.AND, constraint_7, constraint_5)
        solver.assertFormula(formula)
        ```
        When generating parameterized cvc5 solver formulas, please instantiate new variables to check the transcript schema against each constraint in the ADDITIONAL REQUIREMENTS
- All courses submitted for the MSCS degree must be numbered 100 or greater.
- At most 10 units of Foundations requirement courses may be counted toward your 45 units.
- At most 3 units of 1-2 unit seminars may be counted toward your 45 units.
- At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade.*
- The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale).
- Units previously applied toward BS requirements may not also be counted toward the MSCS.
- You must complete at least 45 graduate units at Stanford before receiving the MSCS degree.

*All classes taken Spring 19-20 and Fall through Summer 20-21 for a CR or S grade will satisfy MSCS requirements as if taken for a letter grade.. You should also include
        solver formulas for advisor approval and deviation constraints if there is one. Please note that your formulas should check taken courses in the transcript against each contraint and requirement. Please generate
        parameterized formulas with respect to the requirements only. 
        =======================formula ouput===========================
Below is the Python code to check if a given transcript schema satisfies the given constraints using cvc5:

```python
import cvc5
from cvc5 import Solver, Kind

def check_constraints(transcript):
    solver = Solver()

    # Sorts
    integer = solver.getIntegerSort()
    string = solver.getStringSort()
    boolean = solver.getBooleanSort()
    real = solver.getRealSort()

    # Unit constraints
    total_units = solver.mkInteger(45)
    foundation_units = solver.mkInteger(10)
    seminar_units = solver.mkInteger(3)
    letter_grade_units = solver.mkInteger(36)

    # Constraints for course numbering (All courses must be numbered 100 or greater)
    course_constraints = []
    for course in transcript["Courses_Taken"]:
        course_id = course["Course_ID"]
        if course_id >= 100:
            course_constraints.append(solver.mkTrue())

    # Constraint: All courses should be numbered 100 or above
    all_courses_numbered_100_or_greater = solver.mkTerm(Kind.AND, course_constraints)

    # Foundation units constraint (At most 10 units of Foundations requirement courses may be counted toward your 45 units)
    foundation_courses_units = 0
    for course in transcript["Courses_Taken"]:
        if "Foundation" in course["Title"]:
            foundation_courses_units += course["Earned_Units"]

    foundation_units_constraint = solver.mkTerm(Kind.LEQ, solver.mkInteger(foundation_courses_units), foundation_units)

    # Seminar units constraint (At most 3 units of 1-2 unit seminars may be counted toward your 45 units)
    seminar_courses_units = 0
    for course in transcript["Courses_Taken"]:
        if course["Earned_Units"] in [1, 2]:
            seminar_courses_units += course["Earned_Units"]

    seminar_units_constraint = solver.mkTerm(Kind.LEQ, solver.mkInteger(seminar_courses_units), seminar_units)

    # Letter grade units constraint (At least 36 units submitted for the MSCS degree, including all courses taken for breadth and depth, must be taken for a letter grade)
    letter_grade_courses_units = 0
    for course in transcript["Courses_Taken"]:
        if course["Grade"] in ['A', 'B', 'C', 'D', 'F'] or ('Spring 19-20' <= course["Term"] <= 'Summer 20-21' and course["Grade"] in ['CR', 'S']):
            letter_grade_courses_units += course["Earned_Units"]

    letter_grade_units_constraint = solver.mkTerm(Kind.GEQ, solver.mkInteger(letter_grade_courses_units), letter_grade_units)

    # GPA Constraint (The average grade in the courses submitted for the MSCS must be at least a B (3.0 in Stanford’s GPA scale))
    total_weighted_points = 0
    total_graded_units = 0
    for course in transcript["Courses_Taken"]:
        if course["Grade"] not in ['CR', 'S']:
            grade_points = {
                'A': 4.0,
                'B': 3.0,
                'C': 2.0,
                'D': 1.0,
                'F': 0.0
            }
            grade = grade_points.get(course["Grade"], 0)
            total_weighted_points += grade * course["Earned_Units"]
            total_graded_units += course["Earned_Units"]

    average_gpa = solver.mkReal(total_weighted_points) / solver.mkReal(total_graded_units) if total_graded_units > 0 else solver.mkReal(0)
    gpa_constraint = solver.mkTerm(Kind.GEQ, average_gpa, solver.mkReal(3.0))

    # Units previously applied toward BS requirements may not also be counted toward the MSCS
    total_applied_units = sum(course["Earned_Units"] for course in transcript["Courses_Taken"])
    total_ap_credits = sum(ap_credit["Earned_Units"] for ap_credit in transcript["AP_Credits"])

    # Constraint: Total applied units from MSCS should exclude AP Credits (BS requirements)
    units_exclude_ap = solver.mkTerm(Kind.EQUAL, solver.mkInteger(total_applied_units - total_ap_credits), total_units)

    # Constraint: You must complete at least 45 graduate units at Stanford before receiving the MSCS degree
    total_graduate_units = solver.mkTerm(Kind.EQUAL, solver.mkInteger(total_applied_units), total_units)

    # Advisor approval and deviation constraints
    advisor_approval_constraints = []
    for approval in transcript["Approval"]:
        advisor_approval_constraints.append(solver.mkTerm(Kind.EQUAL, solver.mkBoolean(approval["Approved"]), solver.mkTrue()))

    deviation_approval_constraints = []
    for deviation in transcript["Deviations"]:
        deviation_approval_constraints.append(solver.mkTerm(Kind.EQUAL, solver.mkBoolean(deviation.get("Approved", False)), solver.mkTrue()))

    final_constraint = solver.mkTerm(
        Kind.AND,
        all_courses_numbered_100_or_greater,
        foundation_units_constraint,
        seminar_units_constraint,
        letter_grade_units_constraint,
        gpa_constraint,
        units_exclude_ap,
        total_graduate_units,
        solver.mkTerm(Kind.AND, *advisor_approval_constraints),
        solver.mkTerm(Kind.AND, *deviation_approval_constraints)
    )

    solver.assertFormula(final_constraint)
    return solver.checkSat()

# Example usage
transcript = {
    "Student": {
        "Name": "John Doe",
        "Program": "MSCS",
        "StudentID": 123456,
        "Coterm": False
    },
    "AP_Credits": [
        {"Advanced_Placement": "Math", "Earned_Units": 10}
    ],
    "Courses_Taken": [
        {"Course_ID": 101, "Title": "Intro to CS", "Earned_Units": 3, "Grade": "A", "Term": "Spring 19-20"},
        {"Course_ID": 102, "Title": "Advanced CS", "Earned_Units": 4, "Grade": "B", "Term": "Fall 20-21"},
        # Add more courses as needed
    ],
    "Deviations": [
        {"Deviated_Course_ID": "CS123", "Approved": True, "Approved_By": "Prof. X"}
    ],
    "Approval": [
        {"Approved": True, "Approved_By": "Advisor Y", "Approved_Course_ID": "CS456"}
    ],
    "Cumulative_GPA": {
        "Undergrad": 3.5,
        "Graduate": 3.2
    }
}

result = check_constraints(transcript)
print(result)  # Should print "sat" if all constraints are satisfied, "unsat" otherwise
```

This script uses the cvc5 solver to define and check the constraints for the MSCS degree requirements based on a given transcript.

The script:
1. Asserts each course is numbered 100 or higher.
2. Limits foundation course units to 10.
3. Limits seminar course units to 3.
4. Requires at least 36 units to be taken for a letter grade (including CR/S grades for specified terms).
5. Ensures the average GPA is at least 3.0.
6. Checks that no AP course units are counted towards the MSCS.
7. Requires at least 45 graduate units.
8. Checks for advisor approvals and deviations.

Finally, it uses the `cvc5` Solver to check if all these constraints are satisfied (`sat`) or not (`unsat`).